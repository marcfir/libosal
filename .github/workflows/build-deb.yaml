name: Build DEB Package

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  create_release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3

      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: Automated release for tag ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-deb:
    runs-on: ubuntu-latest
    env:
      DEB_BUILD_OPTIONS: nocheck
    strategy:
      matrix:
        distro: [debian-bookworm, debian-bullseye, ubuntu-24.04, ubuntu-22.04]
        include:
          - distro: debian-bookworm
            image: debian:bookworm
            os: debian
            version: bookworm
          - distro: debian-bullseye
            image: debian:bullseye
            os: debian
            version: bullseye
          - distro: ubuntu-24.04
            image: ubuntu:24.04
            os: ubuntu
            version: noble
          - distro: ubuntu-22.04
            image: ubuntu:22.04
            os: ubuntu
            version: jammy
    container:
      image: ${{ matrix.image }}

    steps:
      - name: Install build dependencies
        run: |
          apt-get update
          apt-get install -y build-essential devscripts debhelper autotools-dev autoconf-archive fakeroot sed git python3-pip python3-venv curl jq

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mark working directory as safe
        run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: update branch name and version
        run: |
          safe_branch=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
          VERSION=$(dpkg-parsechangelog | sed -n 's/^Version: //p')
          sed "s|PACKAGE_VERSION|$VERSION|" configure.ac.in > configure.ac
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Set VERSION env variable
        id: set_version
        run: |
          echo "VERSION=$(dpkg-parsechangelog | sed -n 's/^Version: //p')" >> $GITHUB_ENV

      - name: Prepare autotools
        run: autoreconf -fi

      - name: Build .deb package
        run: dpkg-buildpackage -us -uc -d

      - name: Collect .deb artifact
        run: |
          mkdir -p artifacts/${{ matrix.os }}/${{ matrix.version }}
          mv ../libosal*.deb artifacts/${{ matrix.os }}/${{ matrix.version }}

      - name: Set sanitized image name
        id: sanitize
        run: |
          version=$(dpkg-parsechangelog | sed -n 's/^Version: //p')
          echo "sanitized_image=$(echo "$version-${{ matrix.image }}" | tr '/:' '--')" >> $GITHUB_OUTPUT

      - name: Upload .deb package artifact
        uses: actions/upload-artifact@v4
        with:
          name: libosal-${{ steps.sanitize.outputs.sanitized_image }}.deb
          path: artifacts/${{ matrix.os }}/${{ matrix.version }}/*.deb

      # Fetch the release upload URL dynamically on tag builds
      - name: Get Release Upload URL
        if: startsWith(github.ref, 'refs/tags/')
        id: get_release
        run: |
          release_json=$(curl -sSL \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${GITHUB_REF_NAME}")
          upload_url=$(echo "$release_json" | jq -r '.upload_url' | sed -e "s/{?name,label}//")
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      # Upload main package to GitHub Release (only on tags)
      - name: Upload Debian package to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ matrix.os }}/${{ matrix.version }}/libosal_${{ env.VERSION }}_amd64.deb
          asset_name: libosal_${{ env.VERSION }}_amd64_${{ matrix.os }}-${{ matrix.version }}.deb
          asset_content_type: application/vnd.debian.binary-package

      # Upload dev package to GitHub Release (only on tags)
      - name: Upload Debian dev package to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./artifacts/${{ matrix.os }}/${{ matrix.version }}/libosal-dev_${{ env.VERSION }}_amd64.deb
          asset_name: libosal-dev_${{ env.VERSION }}_amd64_${{ matrix.os }}-${{ matrix.version }}.deb
          asset_content_type: application/vnd.debian.binary-package
          
      - name: Upload to Cloudsmith (${{ matrix.os }}/${{ matrix.version }})
        if: startsWith(github.ref, 'refs/tags/')
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        shell: bash
        run: |
          FILENAME="artifacts/${{ matrix.os }}/${{ matrix.version }}/libosal_${{ env.VERSION }}_amd64.deb"
          FILENAME_DEV="artifacts/${{ matrix.os }}/${{ matrix.version }}/libosal-dev_${{ env.VERSION }}_amd64.deb"
        
          python3 -m venv cloudsmith
          cd cloudsmith
          source bin/activate

          python3 -m pip install --upgrade pip
          pip3 install cloudsmith-cli

          cloudsmith push deb robertburger/common/${{ matrix.os }}/${{ matrix.version }} ../${FILENAME} \
            --republish \
            --api-key "$CLOUDSMITH_API_KEY"
      
          cloudsmith push deb robertburger/common/${{ matrix.os }}/${{ matrix.version }} ../${FILENAME_DEV} \
            --republish \
            --api-key "$CLOUDSMITH_API_KEY"
